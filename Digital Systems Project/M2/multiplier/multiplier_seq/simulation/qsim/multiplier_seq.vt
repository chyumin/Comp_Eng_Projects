// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2016 22:20:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    multiplier_seq
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplier_seq_vlg_sample_tst(
	i_CLK,
	i_clrn,
	i_DINa,
	i_DINb,
	i_start,
	sampler_tx
);
input  i_CLK;
input  i_clrn;
input [7:0] i_DINa;
input [7:0] i_DINb;
input  i_start;
output sampler_tx;

reg sample;
time current_time;
always @(i_CLK or i_clrn or i_DINa or i_DINb or i_start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module multiplier_seq_vlg_check_tst (
	o_DOUT,
	sampler_rx
);
input [15:0] o_DOUT;
input sampler_rx;

reg [15:0] o_DOUT_expected;

reg [15:0] o_DOUT_prev;

reg [15:0] o_DOUT_expected_prev;

reg [15:0] last_o_DOUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	o_DOUT_prev = o_DOUT;
end

// update expected /o prevs

always @(trigger)
begin
	o_DOUT_expected_prev = o_DOUT_expected;
end


// expected o_DOUT[ 15 ]
initial
begin
	o_DOUT_expected[15] = 1'bX;
end 
// expected o_DOUT[ 14 ]
initial
begin
	o_DOUT_expected[14] = 1'bX;
end 
// expected o_DOUT[ 13 ]
initial
begin
	o_DOUT_expected[13] = 1'bX;
end 
// expected o_DOUT[ 12 ]
initial
begin
	o_DOUT_expected[12] = 1'bX;
end 
// expected o_DOUT[ 11 ]
initial
begin
	o_DOUT_expected[11] = 1'bX;
end 
// expected o_DOUT[ 10 ]
initial
begin
	o_DOUT_expected[10] = 1'bX;
end 
// expected o_DOUT[ 9 ]
initial
begin
	o_DOUT_expected[9] = 1'bX;
end 
// expected o_DOUT[ 8 ]
initial
begin
	o_DOUT_expected[8] = 1'bX;
end 
// expected o_DOUT[ 7 ]
initial
begin
	o_DOUT_expected[7] = 1'bX;
end 
// expected o_DOUT[ 6 ]
initial
begin
	o_DOUT_expected[6] = 1'bX;
end 
// expected o_DOUT[ 5 ]
initial
begin
	o_DOUT_expected[5] = 1'bX;
end 
// expected o_DOUT[ 4 ]
initial
begin
	o_DOUT_expected[4] = 1'bX;
end 
// expected o_DOUT[ 3 ]
initial
begin
	o_DOUT_expected[3] = 1'bX;
end 
// expected o_DOUT[ 2 ]
initial
begin
	o_DOUT_expected[2] = 1'bX;
end 
// expected o_DOUT[ 1 ]
initial
begin
	o_DOUT_expected[1] = 1'bX;
end 
// expected o_DOUT[ 0 ]
initial
begin
	o_DOUT_expected[0] = 1'bX;
end 
// generate trigger
always @(o_DOUT_expected or o_DOUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o_DOUT = %b | ",o_DOUT_expected_prev);
	$display("| real o_DOUT = %b | ",o_DOUT_prev);
`endif
	if (
		( o_DOUT_expected_prev[0] !== 1'bx ) && ( o_DOUT_prev[0] !== o_DOUT_expected_prev[0] )
		&& ((o_DOUT_expected_prev[0] !== last_o_DOUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[0] = o_DOUT_expected_prev[0];
	end
	if (
		( o_DOUT_expected_prev[1] !== 1'bx ) && ( o_DOUT_prev[1] !== o_DOUT_expected_prev[1] )
		&& ((o_DOUT_expected_prev[1] !== last_o_DOUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[1] = o_DOUT_expected_prev[1];
	end
	if (
		( o_DOUT_expected_prev[2] !== 1'bx ) && ( o_DOUT_prev[2] !== o_DOUT_expected_prev[2] )
		&& ((o_DOUT_expected_prev[2] !== last_o_DOUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[2] = o_DOUT_expected_prev[2];
	end
	if (
		( o_DOUT_expected_prev[3] !== 1'bx ) && ( o_DOUT_prev[3] !== o_DOUT_expected_prev[3] )
		&& ((o_DOUT_expected_prev[3] !== last_o_DOUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[3] = o_DOUT_expected_prev[3];
	end
	if (
		( o_DOUT_expected_prev[4] !== 1'bx ) && ( o_DOUT_prev[4] !== o_DOUT_expected_prev[4] )
		&& ((o_DOUT_expected_prev[4] !== last_o_DOUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[4] = o_DOUT_expected_prev[4];
	end
	if (
		( o_DOUT_expected_prev[5] !== 1'bx ) && ( o_DOUT_prev[5] !== o_DOUT_expected_prev[5] )
		&& ((o_DOUT_expected_prev[5] !== last_o_DOUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[5] = o_DOUT_expected_prev[5];
	end
	if (
		( o_DOUT_expected_prev[6] !== 1'bx ) && ( o_DOUT_prev[6] !== o_DOUT_expected_prev[6] )
		&& ((o_DOUT_expected_prev[6] !== last_o_DOUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[6] = o_DOUT_expected_prev[6];
	end
	if (
		( o_DOUT_expected_prev[7] !== 1'bx ) && ( o_DOUT_prev[7] !== o_DOUT_expected_prev[7] )
		&& ((o_DOUT_expected_prev[7] !== last_o_DOUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[7] = o_DOUT_expected_prev[7];
	end
	if (
		( o_DOUT_expected_prev[8] !== 1'bx ) && ( o_DOUT_prev[8] !== o_DOUT_expected_prev[8] )
		&& ((o_DOUT_expected_prev[8] !== last_o_DOUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[8] = o_DOUT_expected_prev[8];
	end
	if (
		( o_DOUT_expected_prev[9] !== 1'bx ) && ( o_DOUT_prev[9] !== o_DOUT_expected_prev[9] )
		&& ((o_DOUT_expected_prev[9] !== last_o_DOUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[9] = o_DOUT_expected_prev[9];
	end
	if (
		( o_DOUT_expected_prev[10] !== 1'bx ) && ( o_DOUT_prev[10] !== o_DOUT_expected_prev[10] )
		&& ((o_DOUT_expected_prev[10] !== last_o_DOUT_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[10] = o_DOUT_expected_prev[10];
	end
	if (
		( o_DOUT_expected_prev[11] !== 1'bx ) && ( o_DOUT_prev[11] !== o_DOUT_expected_prev[11] )
		&& ((o_DOUT_expected_prev[11] !== last_o_DOUT_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[11] = o_DOUT_expected_prev[11];
	end
	if (
		( o_DOUT_expected_prev[12] !== 1'bx ) && ( o_DOUT_prev[12] !== o_DOUT_expected_prev[12] )
		&& ((o_DOUT_expected_prev[12] !== last_o_DOUT_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[12] = o_DOUT_expected_prev[12];
	end
	if (
		( o_DOUT_expected_prev[13] !== 1'bx ) && ( o_DOUT_prev[13] !== o_DOUT_expected_prev[13] )
		&& ((o_DOUT_expected_prev[13] !== last_o_DOUT_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[13] = o_DOUT_expected_prev[13];
	end
	if (
		( o_DOUT_expected_prev[14] !== 1'bx ) && ( o_DOUT_prev[14] !== o_DOUT_expected_prev[14] )
		&& ((o_DOUT_expected_prev[14] !== last_o_DOUT_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[14] = o_DOUT_expected_prev[14];
	end
	if (
		( o_DOUT_expected_prev[15] !== 1'bx ) && ( o_DOUT_prev[15] !== o_DOUT_expected_prev[15] )
		&& ((o_DOUT_expected_prev[15] !== last_o_DOUT_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_DOUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_DOUT_expected_prev);
		$display ("     Real value = %b", o_DOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_DOUT_exp[15] = o_DOUT_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module multiplier_seq_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i_CLK;
reg i_clrn;
reg [7:0] i_DINa;
reg [7:0] i_DINb;
reg i_start;
// wires                                               
wire [15:0] o_DOUT;

wire sampler;                             

// assign statements (if any)                          
multiplier_seq i1 (
// port map - connection between master ports and signals/registers   
	.i_CLK(i_CLK),
	.i_clrn(i_clrn),
	.i_DINa(i_DINa),
	.i_DINb(i_DINb),
	.i_start(i_start),
	.o_DOUT(o_DOUT)
);

// i_CLK
always
begin
	i_CLK = 1'b0;
	i_CLK = #12500 1'b1;
	#12500;
end 

// i_clrn
initial
begin
	i_clrn = 1'b1;
end 
// i_DINa[ 7 ]
initial
begin
	i_DINa[7] = 1'b0;
end 
// i_DINa[ 6 ]
initial
begin
	i_DINa[6] = 1'b0;
end 
// i_DINa[ 5 ]
initial
begin
	i_DINa[5] = 1'b0;
end 
// i_DINa[ 4 ]
initial
begin
	i_DINa[4] = 1'b1;
end 
// i_DINa[ 3 ]
initial
begin
	i_DINa[3] = 1'b0;
end 
// i_DINa[ 2 ]
initial
begin
	i_DINa[2] = 1'b1;
end 
// i_DINa[ 1 ]
initial
begin
	i_DINa[1] = 1'b0;
end 
// i_DINa[ 0 ]
initial
begin
	i_DINa[0] = 1'b0;
end 
// i_DINb[ 7 ]
initial
begin
	i_DINb[7] = 1'b0;
end 
// i_DINb[ 6 ]
initial
begin
	i_DINb[6] = 1'b0;
end 
// i_DINb[ 5 ]
initial
begin
	i_DINb[5] = 1'b0;
end 
// i_DINb[ 4 ]
initial
begin
	i_DINb[4] = 1'b0;
end 
// i_DINb[ 3 ]
initial
begin
	i_DINb[3] = 1'b1;
end 
// i_DINb[ 2 ]
initial
begin
	i_DINb[2] = 1'b1;
end 
// i_DINb[ 1 ]
initial
begin
	i_DINb[1] = 1'b1;
end 
// i_DINb[ 0 ]
initial
begin
	i_DINb[0] = 1'b1;
end 

multiplier_seq_vlg_sample_tst tb_sample (
	.i_CLK(i_CLK),
	.i_clrn(i_clrn),
	.i_DINa(i_DINa),
	.i_DINb(i_DINb),
	.i_start(i_start),
	.sampler_tx(sampler)
);

multiplier_seq_vlg_check_tst tb_out(
	.o_DOUT(o_DOUT),
	.sampler_rx(sampler)
);
endmodule

